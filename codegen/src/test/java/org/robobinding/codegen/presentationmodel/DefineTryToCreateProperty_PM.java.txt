-----------------------------------org.robobinding.codegen.presentationmodel.DefineTryToCreateProperty_PM.java-----------------------------------
package org.robobinding.codegen.presentationmodel;

import java.util.Set;
import org.robobinding.codegen.presentationmodel.differentpackage.CustomClass;
import org.robobinding.property.AbstractGetSet;
import org.robobinding.property.AbstractGetSet;
import org.robobinding.property.AbstractGetSet;
import org.robobinding.property.AbstractGetSet;
import org.robobinding.property.AbstractGetSet;
import org.robobinding.property.AbstractGetSet;
import org.robobinding.property.PropertyDescriptor;
import org.robobinding.property.SimpleProperty;

public class DefineTryToCreateProperty_PM {
	final DefineTryToCreateProperty presentationModel;
	@Override
	public SimpleProperty tryToCreateProperty(String name) {
		if (name.equals("booleanProp")) {
			PropertyDescriptor descriptor = createPropertyDescriptor(Boolean.class, name, true, false);
			
			AbstractGetSet<?> getSet = new AbstractGetSet<Boolean>(descriptor) {
				@Override
				public Boolean getValue() {
					return presentationModel.isBooleanProp();
				}
			};
			
			return new SimpleProperty(this, descriptor, getSet);
		}
		
		if (name.equals("customClass1")) {
			PropertyDescriptor descriptor = createPropertyDescriptor(CustomClass.class,name,true,false);
			
			AbstractGetSet<?> getSet = new AbstractGetSet<CustomClass>(descriptor) {
				@Override
				public CustomClass getValue() {
					return presentationModel.getCustomClass1();
				}
			};
			return new SimpleProperty(this, descriptor, getSet);
		}
		
		if (name.equals("customClass2")) {
			PropertyDescriptor descriptor = createPropertyDescriptor(CustomClass.class,name,true,false);
			
			AbstractGetSet<?> getSet = new AbstractGetSet<CustomClass>(descriptor) {
				@Override
				public CustomClass getValue() {
					return presentationModel.getCustomClass2();
				}
			};
			return new SimpleProperty(this, descriptor, getSet);
		}
		
		if (name.equals("prop")) {
			PropertyDescriptor descriptor = createPropertyDescriptor(String.class, name, true, true);
			
			AbstractGetSet<?> getSet = new AbstractGetSet<String>(descriptor) {
				@Override
				public String getValue() {
					return presentationModel.getProp();
				}
				
				@Override
				public void setValue(String newValue) {
					presentationModel.setProp(newValue);
				}
			};
			
			return new SimpleProperty(this, descriptor, getSet);
		}
		
		if(name.equals("readOnlyProp")) {
			PropertyDescriptor descriptor = createPropertyDescriptor(Integer.class, name, true, false);
			
			AbstractGetSet<?> getSet = new AbstractGetSet<Integer>(descriptor) {
				@Override
				public Integer getValue() {
					return presentationModel.getReadOnlyProp();
				}
			};
			
			return new SimpleProperty(this, descriptor, getSet);
		}
		
		if (name.equals("setProp")) {
			PropertyDescriptor descriptor = createPropertyDescriptor(Set.class, name, true, true);
			
			AbstractGetSet<?> getSet = new AbstractGetSet<Set>(descriptor) {
				@Override
				public Set getValue() {
					return presentationModel.getSetProp();
				}
				
				@Override
				public void setValue(Set newValue) {
					presentationModel.setSetProp(newValue);
				}
			};
			
			return new SimpleProperty(this, descriptor, getSet);
		} 
		
		
		if (name.equals("writeOnlyProp")) {
			PropertyDescriptor descriptor = createPropertyDescriptor(Integer.class, name, false, true);
			
			AbstractGetSet<?> getSet = new AbstractGetSet<Integer>(descriptor) {
				@Override
				public void setValue(Integer newValue) {
					presentationModel.setWriteOnlyProp(newValue);
				}
			};
			
			return new SimpleProperty(this, descriptor, getSet);
		} 
		
		return null;
	}
}