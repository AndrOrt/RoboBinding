-----------------------------------org.robobinding.codegen.presentationmodel.DefineTryToCreateDataSetProperty_PM.java-----------------------------------
package org.robobinding.codegen.presentationmodel;

import java.util.List;
import org.robobinding.itempresentationmodel.ListObservable;
import org.robobinding.itempresentationmodel.RefreshableItemPresentationModel;
import org.robobinding.itempresentationmodel.RefreshableItemPresentationModelFactory;
import org.robobinding.itempresentationmodel.TypedCursor;
import org.robobinding.itempresentationmodel.ViewTypeSelectable;
import org.robobinding.itempresentationmodel.ViewTypeSelectionContext;
import org.robobinding.property.AbstractGetSet;
import org.robobinding.property.AbstractGetSet;
import org.robobinding.property.AbstractGetSet;
import org.robobinding.property.AbstractGetSet;
import org.robobinding.property.DataSetProperty;
import org.robobinding.property.ListDataSet;
import org.robobinding.property.ObservableDataSet;
import org.robobinding.property.PropertyDescriptor;
import org.robobinding.property.TypedCursorDataSet;

public class DefineTryToCreateDataSetProperty_PM {
	final DefineTryToCreateDataSetProperty presentationModel;
	@Override
	public DataSetProperty tryToCreateDataSetProperty(String name) {
		if(name.equals("cursorDataSetProp")) {
			PropertyDescriptor descriptor = createDataSetPropertyDescriptor(TypedCursor.class, name);
			
			AbstractGetSet<?> getSet = new AbstractGetSet<TypedCursor>(descriptor) {
				@Override
				public TypedCursor getValue() {
					return presentationModel.getCursorDataSetProp();
				}
			};
			
			RefreshableItemPresentationModelFactory factory = new RefreshableItemPresentationModelFactory() {
				
				@Override
				public RefreshableItemPresentationModel create(int itemViewType) {
					return new org.robobinding.codegen.presentationmodel.StringItemPresentationModel$$IPM(new StringItemPresentationModel());
				}
			};	
			
			return new DataSetProperty(this, descriptor, new TypedCursorDataSet(factory, getSet));
		}
		
		if(name.equals("dataSetProp")) {
			PropertyDescriptor descriptor = createDataSetPropertyDescriptor(List.class, name);
			
			AbstractGetSet<?> getSet = new AbstractGetSet<List>(descriptor) {
				@Override
				public List getValue() {
					return presentationModel.getDataSetProp();
				}
			};
			
			RefreshableItemPresentationModelFactory factory = new RefreshableItemPresentationModelFactory() {
				
				@Override
				public RefreshableItemPresentationModel create(int itemViewType) {
					return new org.robobinding.codegen.presentationmodel.StringItemPresentationModel$$IPM(new StringItemPresentationModel());
				}
			};	
			
			return new DataSetProperty(this, descriptor, new ListDataSet(factory, getSet));
		}
		
		if(name.equals("dataSetPropWithFactoryMethod")) {
			PropertyDescriptor descriptor = createDataSetPropertyDescriptor(List.class, name);
			
			AbstractGetSet<?> getSet = new AbstractGetSet<List>(descriptor) {
				@Override
				public List getValue() {
					return presentationModel.getDataSetPropWithFactoryMethod();
				}
			};
			
			RefreshableItemPresentationModelFactory factory = new RefreshableItemPresentationModelFactory() {
				@Override
				public RefreshableItemPresentationModel create(int itemViewType) {
					return new org.robobinding.codegen.presentationmodel.StringItemPresentationModel$$IPM(
						presentationModel.createStringItemPresentationModel());
				}
			};
			
			return new DataSetProperty(this, descriptor, new ListDataSet(factory, getSet));
		} 
		
		if(name.equals("dataSetPropWithFactoryMethodWithParameter")) {
			PropertyDescriptor descriptor = createDataSetPropertyDescriptor(List.class, name);
			
			AbstractGetSet<?> getSet = new AbstractGetSet<List>(descriptor) {
				@Override
				public List getValue() {
					return presentationModel.getDataSetPropWithFactoryMethodWithParameter();
				}
			};
			
			RefreshableItemPresentationModelFactory factory = new RefreshableItemPresentationModelFactory() {
				@Override
				public RefreshableItemPresentationModel create(int itemViewType) {
					return new org.robobinding.codegen.presentationmodel.StringItemPresentationModel$$IPM(
						presentationModel.createStringItemPresentationModelWithParameter(itemViewType));
				}
			};
			
			return new DataSetProperty(this, descriptor, new ListDataSet(factory, getSet));
		} 
		
		if(name.equals("dataSetPropWithViewTypeSelector")) {
			PropertyDescriptor descriptor = createDataSetPropertyDescriptor(List.class, name);
			
			AbstractGetSet<?> getSet = new AbstractGetSet<List>(descriptor) {
				@Override
				public List getValue() {
					return presentationModel.getDataSetPropWithViewTypeSelector();
				}
			};
			
			RefreshableItemPresentationModelFactory factory = new RefreshableItemPresentationModelFactory() {
				@Override
				public RefreshableItemPresentationModel create(int itemViewType) {
					return new org.robobinding.codegen.presentationmodel.StringItemPresentationModel$$IPM(new StringItemPresentationModel());
				}
			};
			
			ViewTypeSelectable viewTypeSelector = new ViewTypeSelectable() {
				@Override
				@SuppressWarnings({ "rawtypes", "unchecked" }) 
				public int selectViewType(ViewTypeSelectionContext context) {
					return presentationModel.selectViewType(context);
				}
			};
			
			return new DataSetProperty(this, descriptor, new ListDataSet(factory, getSet), viewTypeSelector);
		} 
		
		if(name.equals("listObservableProp")) {
			PropertyDescriptor descriptor = createDataSetPropertyDescriptor(ListObservable.class, name);
			
			AbstractGetSet<?> getSet = new AbstractGetSet<ListObservable>(descriptor) {
				@Override
				public ListObservable getValue() {
					return presentationModel.getListObservableProp();
				}
			};
			
			RefreshableItemPresentationModelFactory factory = new RefreshableItemPresentationModelFactory() {
				
				@Override
				public RefreshableItemPresentationModel create(int itemViewType) {
					return new org.robobinding.codegen.presentationmodel.StringItemPresentationModel$$IPM(new StringItemPresentationModel());
				}
			};	
			
			return new DataSetProperty(this, descriptor, new ObservableDataSet(factory, getSet));
		}
		
		return null;
	}
}